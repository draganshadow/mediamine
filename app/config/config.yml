imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: mediamine.yml }

framework:
    #esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        default_connection: default
        connections:
            default:
                driver:   %database_driver%
                host:     %database_host%
                port:     %database_port%
                dbname:   %database_name%
                user:     %database_user%
                password: %database_password%
                charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
#        auto_mapping: true
        default_entity_manager: default
        entity_managers:
            default:
                connection: default
                mappings:
                    MediaMineCoreBundle:  ~
                    ApplicationSonataUserBundle:  ~

stof_doctrine_extensions:
    default_locale: en_US

    # Only used if you activated the Uploadable extension
#    uploadable:
#        # Default file path: This is one of the three ways you can configure the path for the Uploadable extension
#        default_file_path:       %kernel.root_dir%/../web/uploads
#
#        # Mime type guesser class: Optional. By default, we provide an adapter for the one present in the HttpFoundation component of Symfony
#        mime_type_guesser_class: Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter
#
#        # Default file info class implementing FileInfoInterface: Optional. By default we provide a class which is prepared to receive an UploadedFile instance.
#        default_file_info_class: Stof\DoctrineExtensionsBundle\Uploadable\UploadedFileInfo
    orm:
        default:
            sluggable: true
            timestampable: true
#    mongodb:
#        default: ~

doctrine_mongodb:
    connections:
        default:
            server: "mongodb://%mongo_host%:27017"
            options: {}
    default_database: "%mongo_database%"
    document_managers:
        default:
            auto_mapping: true
# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

sensio_framework_extra:
    router:   { annotations: true }
    request:  { converters: true, auto_convert: true }
    view:     { annotations: false }
    cache:    { annotations: true }
    security: { annotations: true }

jms_di_extra:
    doctrine_integration: true
    locations:
        all_bundles: false
        bundles: [MediaMineCoreBundle]
        directories: ["%kernel.root_dir%/../src"]
#    automatic_controller_injections:
#        properties:
#            request: "@request"
#            router: "@router"
#        method_calls:
#            setRouter: ["@router"]

fos_user:
    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name: main
    user_class: Application\Sonata\UserBundle\Entity\User

    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

    service:
        user_manager: sonata.user.orm.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

sonata_admin:
    title: MediaMine Admin
#    title_logo: bundles/acmedemo/img/fancy_acme_logo.png
    templates:
            # other configuration options
            search:              SonataAdminBundle:Core:search.html.twig
            search_result_block: SonataAdminBundle:Block:block_search_result.html.twig
sonata_block:
    default_contexts: [cms]
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.admin.block.search_result:
            contexts: [admin]
        # Your other blocks
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
imports:
    - { resource: @MediaMineCoreBundle/Resources/config/admin.yml }

fos_rest:
    param_fetcher_listener: true
    body_listener:
#        array_normalizer: fos_rest.normalizer.camel_keys
        decoders:
            json: fos_rest.decoder.json
            xml: fos_rest.decoder.xml
    format_listener: true
    view:
        view_response_listener: 'force'
        formats:
            xml: true
            json : true
        templating_formats:
            html: true
        force_redirects:
            html: true
        failed_validation: HTTP_BAD_REQUEST
        default_engine: twig
    routing_loader:
        default_format: json
        include_format: false

nelmio_api_doc: ~

fos_elastica:
#    serializer: ~
    clients:
        default: { host: elasticsearch, port: 9200 }
    indexes:
        search:
            finder: ~
            types:
                Video:
                    mappings:
                        name: { boost: 10 }
                        files:
                            type: "nested"
                            properties:
                                file:
                                    type: "nested"
                                    properties:
                                        name: { boost: 5 }
                    persistence:
                        driver: orm
                        model: MediaMine\CoreBundle\Entity\Video\Video
                        model_to_elastica_transformer:
                            service: mediamine.elastica.transformer.video
                        elastica_to_model_transformer:
                            service: mediamine.elastica.hydrator.video
                        provider: ~
                        listener:
                            immediate: ~
                        finder: ~
                Group:
                    mappings:
                        name: { boost: 10 }
                    persistence:
                        driver: orm
                        model: MediaMine\CoreBundle\Entity\Video\Group
                        model_to_elastica_transformer:
                            service: mediamine.elastica.transformer.group
                        elastica_to_model_transformer:
                            service: mediamine.elastica.hydrator.group
                        provider: ~
                        listener:
                            immediate: ~
                        finder: ~
                Person:
                    mappings:
                        name: { boost: 10 }
                    persistence:
                        driver: orm
                        model: MediaMine\CoreBundle\Entity\Common\Person
                        model_to_elastica_transformer:
                            service: mediamine.elastica.transformer.person
                        elastica_to_model_transformer:
                            service: mediamine.elastica.hydrator.person
                        provider: ~
                        listener:
                            immediate: ~
                        finder: ~
sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb

old_sound_rabbit_mq:
    connections:
        default:
            host:     'rabbitmq'
            port:     5672
            user:     'guest'
            password: 'guest'
            vhost:    '/'
            lazy:     false
    producers:
        task:
            connection:       default
            exchange_options: {name: 'task', type: direct}
        job:
            connection:       default
            exchange_options: {name: 'job', type: direct}
    consumers:
        task:
            connection:       default
            exchange_options: {name: 'task', type: direct}
            queue_options:    {name: 'task'}
            callback:         mediamine.consumer.task
        job:
            connection:       default
            exchange_options: {name: 'job', type: direct}
            queue_options:    {name: 'job'}
            callback:         mediamine.consumer.job

snc_redis:
    clients:
        default:
            type: phpredis
            alias: default
            dsn: redis://redis
